@model CoAlert.Application.Dtos.Postagem.PostagemResponseDto
@using CoAlert.Application.Dtos.Comentario

@{
    ViewData["Title"] = "Detalhes da Postagem";
}

<div class="container">
    <h1>Detalhes da Postagem</h1>

    <!-- User Selection -->
    <div class="mb-4">
        <label for="userSelect" class="form-label">Selecione o usuário para interagir:</label>
        <select id="userSelect" class="form-select" asp-items="@ViewBag.Usuarios">
        </select>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5 class="card-title mb-0">@Model.NmTitulo</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    <dl class="row">
                        <dt class="col-sm-3">Conteúdo</dt>
                        <dd class="col-sm-9">@Model.NmConteudo</dd>

                        <dt class="col-sm-3">Usuário</dt>
                        <dd class="col-sm-9">@Model.Usuario.NmUsuario</dd>

                        <dt class="col-sm-3">Categoria</dt>
                        <dd class="col-sm-9">@Model.CategoriaDesastre.NmTitulo</dd>

                        <dt class="col-sm-3">Localização</dt>
                        <dd class="col-sm-9">@Model.Localizacao.NmCidade, @Model.Localizacao.NmEstado - @Model.Localizacao.NmPais</dd>

                        <dt class="col-sm-3">Data de Envio</dt>
                        <dd class="col-sm-9">@Model.DtEnvio.ToString("dd/MM/yyyy HH:mm")</dd>

                        <dt class="col-sm-3">Curtidas</dt>
                        <dd class="col-sm-9">
                            <button class="btn btn-link text-decoration-none like-button @(ViewBag.PostagemCurtida ? "liked" : "")" 
                                    data-type="post" 
                                    data-id="@Model.IdPostagem">
                                <i class="bi bi-heart-fill"></i>
                                <span class="like-count">@Model.NrLikes</span>
                            </button>
                        </dd>
                    </dl>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <a asp-action="Edit" asp-route-id="@Model.IdPostagem" class="btn btn-primary">
                <i class="bi bi-pencil"></i> Editar
            </a>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Voltar
            </a>
        </div>
    </div>

    <!-- Seção de Comentários -->
    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">Comentários</h5>
        </div>
        <div class="card-body">
            <!-- Formulário de Novo Comentário Principal -->
            <div class="mb-4">
                <form asp-action="AddComment" asp-route-postagemId="@Model.IdPostagem" method="post">
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <textarea name="NmConteudo" class="form-control" rows="3" placeholder="Escreva seu comentário..." required></textarea>
                    </div>
                    <input type="hidden" name="UsuarioId" id="commentUserId" />
                    <button type="submit" class="btn btn-primary mt-2">
                        <i class="bi bi-chat-dots"></i> Comentar
                    </button>
                </form>
            </div>

            <!-- Lista de Comentários -->
            @if (Model.Comentarios != null && Model.Comentarios.Any())
            {
                var comentariosPrincipais = Model.Comentarios.Where(c => !c.IdComentarioParente.HasValue).OrderByDescending(c => c.DtEnvio);
                var comentariosRespostas = Model.Comentarios.Where(c => c.IdComentarioParente.HasValue)
                    .GroupBy(c => c.IdComentarioParente)
                    .ToDictionary(g => g.Key, g => g.OrderBy(c => c.DtEnvio));

                foreach (var comentario in comentariosPrincipais)
                {
                    <div class="comment mb-4">
                        <!-- Comentário Principal -->
                        <div class="border-bottom pb-3">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <strong>@comentario.Usuario.NmUsuario</strong>
                                    <small class="text-muted">- @comentario.DtEnvio.ToString("dd/MM/yyyy HH:mm")</small>
                                </div>
                                <div>
                                    <button class="btn btn-link text-decoration-none like-button @(ViewBag.ComentariosCurtidos[comentario.IdComentario] ? "liked" : "")" 
                                            data-type="comment" 
                                            data-id="@comentario.IdComentario">
                                        <i class="bi bi-heart-fill"></i>
                                        <span class="like-count">@comentario.NrLikes</span>
                                    </button>
                                </div>
                            </div>
                            <p class="mt-2 mb-2">@comentario.NmConteudo</p>
                            <button class="btn btn-sm btn-outline-primary reply-btn" 
                                    data-comment-id="@comentario.IdComentario"
                                    onclick="toggleReplyForm(@comentario.IdComentario)">
                                <i class="bi bi-reply"></i> Responder
                            </button>
                            
                            <!-- Formulário de Resposta (inicialmente oculto) -->
                            <div id="replyForm_@comentario.IdComentario" class="mt-3" style="display: none;">
                                <form asp-action="AddComment" asp-route-postagemId="@Model.IdPostagem" method="post">
                                    @Html.AntiForgeryToken()
                                    <div class="form-group">
                                        <textarea name="NmConteudo" class="form-control" rows="2" 
                                                placeholder="Escreva sua resposta..." required></textarea>
                                    </div>
                                    <input type="hidden" name="UsuarioId" class="reply-user-id" />
                                    <input type="hidden" name="IdComentarioParente" value="@comentario.IdComentario" />
                                    <div class="mt-2">
                                        <button type="submit" class="btn btn-sm btn-primary">
                                            <i class="bi bi-send"></i> Enviar Resposta
                                        </button>
                                        <button type="button" class="btn btn-sm btn-secondary" 
                                                onclick="toggleReplyForm(@comentario.IdComentario)">
                                            Cancelar
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>

                        <!-- Respostas ao Comentário -->
                        @if (comentariosRespostas.ContainsKey(comentario.IdComentario))
                        {
                            <div class="ms-4 mt-3">
                                @foreach (var resposta in comentariosRespostas[comentario.IdComentario])
                                {
                                    <div class="comment-reply mb-3 pb-2 border-bottom">
                                        <div class="d-flex justify-content-between">
                                            <div>
                                                <strong>@resposta.Usuario.NmUsuario</strong>
                                                <small class="text-muted">- @resposta.DtEnvio.ToString("dd/MM/yyyy HH:mm")</small>
                                            </div>
                                            <div>
                                                <button class="btn btn-link text-decoration-none like-button @(ViewBag.ComentariosCurtidos[resposta.IdComentario] ? "liked" : "")" 
                                                        data-type="comment" 
                                                        data-id="@resposta.IdComentario">
                                                    <i class="bi bi-heart-fill"></i>
                                                    <span class="like-count">@resposta.NrLikes</span>
                                                </button>
                                            </div>
                                        </div>
                                        <p class="mt-2 mb-0">@resposta.NmConteudo</p>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                <p class="text-muted">Nenhum comentário ainda. Seja o primeiro a comentar!</p>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleReplyForm(commentId) {
            const formId = `replyForm_${commentId}`;
            const form = document.getElementById(formId);
            if (form) {
                if (form.style.display === 'none') {
                    form.style.display = 'block';
                    form.querySelector('textarea').focus();
                } else {
                    form.style.display = 'none';
                }
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const userSelect = document.getElementById('userSelect');
            const commentUserId = document.getElementById('commentUserId');
            const replyUserIds = document.querySelectorAll('.reply-user-id');
            
            // Set initial selected user
            const selectedUserId = '@ViewBag.SelectedUserId';
            if (userSelect) {
                userSelect.value = selectedUserId;
            }

            // Update hidden user IDs when user selection changes
            userSelect.addEventListener('change', function() {
                const selectedUserId = this.value;
                
                // Update main comment form
                if (commentUserId) {
                    commentUserId.value = selectedUserId;
                }
                
                // Update all reply forms
                replyUserIds.forEach(input => {
                    input.value = selectedUserId;
                });

                // Reload page with new user
                window.location.href = `${window.location.pathname}?usuarioId=${selectedUserId}`;
            });

            // Set initial values for all user ID fields
            if (commentUserId) {
                commentUserId.value = selectedUserId;
            }
            replyUserIds.forEach(input => {
                input.value = selectedUserId;
            });

            // Handle like buttons
            const likeButtons = document.querySelectorAll('.like-button');
            likeButtons.forEach(button => {
                button.addEventListener('click', async function() {
                    const type = this.dataset.type;
                    const id = this.dataset.id;
                    const userId = userSelect.value;

                    if (!userId) {
                        alert('Por favor, selecione um usuário primeiro.');
                        return;
                    }

                    try {
                        const response = await fetch('/api/Like/toggle', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({ 
                                usuarioId: userId,
                                postagemId: type === 'post' ? parseInt(id) : null,
                                comentarioId: type === 'comment' ? parseInt(id) : null
                            })
                        });

                        if (response.ok) {
                            const result = await response.json();
                            const likeCount = this.querySelector('.like-count');
                            likeCount.textContent = result.totalLikes;
                            
                            if (result.isLiked) {
                                this.classList.add('liked');
                            } else {
                                this.classList.remove('liked');
                            }
                        } else {
                            const error = await response.text();
                            console.error('Error:', error);
                            alert('Erro ao processar o like. Por favor, tente novamente.');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Erro ao processar o like. Por favor, tente novamente.');
                    }
                });
            });
        });
    </script>

    <style>
        .like-button {
            color: #dc3545;
        }

        .like-button:not(.liked) {
            opacity: 0.5;
        }

        .like-button.liked {
            opacity: 1;
        }

        .comment {
            border-left: 3px solid #dee2e6;
            padding-left: 1rem;
        }
    </style>
} 